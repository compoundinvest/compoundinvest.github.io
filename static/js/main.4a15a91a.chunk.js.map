{"version":3,"sources":["QuoteService/MoexQuoteService/Entity/MoexQuote.ts","QuoteService/MoexQuoteService/MoexQuoteDataProvider.ts","Core/Entity/Currency.ts","InvestmentIdea/Entity/InvestmentIdea.ts","InvestmentIdea/Entity/InvestmentIdeaDataProvider.ts","InvestmentIdea/InvestmentIdeasChart/InvestmentIdeasChart.tsx","App.tsx","index.tsx"],"names":["MoexQuote","ticker","quote","marketCap","Object","classCallCheck","this","fetchMOEXQuotes","_fetchMOEXQuotes","apply","arguments","_callee","response","quotes","uncastQuotes","_regeneratorRuntime","wrap","_context","prev","next","axios","get","sent","data","marketdata","length","abrupt","forEach","uncastQuote","push","stop","Currency","InvestmentIdea","author","currency","targetPrice","risk","priceOnOpening","openingDate","investmentThesis","companyName","upside","createClass","key","value","currentQuote","getInvestmentIdeasList","ideaList","properIdeas","ideas","parsedIdeas","ideasAuthor","i","values","parsedIdea","USD","RUB","getLocalIdeasList","_loop","find","calculateUpside","sort","idea1","idea2","InvestmentIdeasPage","react_default","a","createElement","Navigation","RevenueChart","className","_useState","useState","_useState2","slicedToArray","ideasList","updateUpsides","useEffect","_ref","asyncToGenerator","InvestmentIdeasChart_regeneratorRuntime","mark","fetchQuotes","labels","map","idea","datasets","label","backgroundColor","borderWidth","console","log","style","height","position","marginBottom","padding","dist","options","maintainAspectRatio","Chart","register","toConsumableArray","registerables","App","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4a15a91a.chunk.js","sourcesContent":["import { SimpleQuote } from \"../../SimpleQuote\";\n\nexport class MoexQuote implements SimpleQuote {\n    ticker: string;\n    quote: number;\n    marketCap?: number;\n\n    constructor(ticker: string, quote: number, marketCap?: number) {\n        this.ticker = ticker;\n        this.quote = quote;\n        this.marketCap = marketCap;\n    }\n}\n","import { MoexQuote } from \"./Entity/MoexQuote\";\nimport { MOEXResponse } from \"./Entity/MoexQuoteDTO\";\nimport axios from \"axios\";\n\nexport async function fetchMOEXQuotes(): Promise<MoexQuote[]> {\n    const response = await axios.get<MOEXResponse>(\n        \"https://iss.moex.com/iss/engines/stock/markets/shares/boards/tqbr/securities.json?iss.meta=on&iss.only=marketdata&marketdata.columns=SECID,LAST,ISSUECAPITALIZATION\"\n    );\n\n    let quotes: MoexQuote[] = [];\n    const uncastQuotes = response.data.marketdata.data;\n    if (uncastQuotes.length == 0) {\n        return [];\n    }\n\n    uncastQuotes.forEach((uncastQuote) => {\n        if (typeof uncastQuote[0] !== \"string\") {\n            return;\n        }\n        if (typeof uncastQuote[1] !== \"number\") {\n            return;\n        }\n\n        const quote = new MoexQuote(uncastQuote[0] as string, uncastQuote[1] as number, uncastQuote[2] as number);\n        quotes.push(quote);\n    });\n    return quotes;\n}\n","export enum Currency {\n    USD = \"USD\",\n    RUB = \"RUB\",\n    undefined = \"undefined\",\n}\n","import { Currency } from \"../../Core/Entity/Currency\";\nimport { SimpleQuote } from \"../../QuoteService/SimpleQuote\";\n\nexport class InvestmentIdea {\n    author: string;\n    ticker: string;\n    companyName?: string;\n    currency: Currency;\n    targetPrice: number;\n    priceOnOpening?: number;\n    openingDate?: Date;\n    risk?: string;\n    investmentThesis?: string;\n    upside?: number;\n\n    constructor(\n        author: string,\n        ticker: string,\n        currency: Currency,\n        targetPrice: number,\n        risk: string,\n        priceOnOpening?: number,\n        openingDate?: Date,\n        investmentThesis?: string,\n        companyName?: string,\n        upside?: number\n    ) {\n        this.author = author;\n        this.ticker = ticker;\n        this.currency = currency;\n        this.targetPrice = targetPrice;\n        this.priceOnOpening = priceOnOpening;\n        this.openingDate = openingDate;\n        this.risk = risk;\n        this.companyName = companyName;\n        this.investmentThesis = investmentThesis;\n    }\n\n    calculateUpside(currentQuote: SimpleQuote): number | undefined {\n        if (currentQuote.quote <= 0) {\n            return undefined;\n        }\n\n        const upside = (this.targetPrice - currentQuote.quote) / currentQuote.quote;\n\n        const upsideAsPercentage = upside * 100;\n        return upsideAsPercentage;\n    }\n}\n","import { InvestmentIdea } from \"./InvestmentIdea\";\nimport { Currency } from \"../../Core/Entity/Currency\";\n\nimport ideas from \"./idealist.json\";\nimport { SimpleQuote } from \"../../QuoteService/SimpleQuote\";\n\nexport function getInvestmentIdeasList(quotes: SimpleQuote[]): InvestmentIdea[] {\n    let ideaList = getLocalIdeasList();\n\n    for (let i = 0; i < ideaList.length; i++) {\n        const quote = quotes.find((quote) => quote.ticker === ideaList[i].ticker);\n        if (typeof quote === \"undefined\") {\n            continue;\n        }\n        ideaList[i].upside = ideaList[i].calculateUpside(quote);\n    }\n\n    ideaList.sort((idea1, idea2) => {\n        if (idea1.upside == null && idea2.upside == null) return 0;\n        if (idea1.upside == null && idea2.upside != null) return 1;\n        if (idea1.upside != null && idea2.upside == null) return -1;\n\n        return idea1.upside! > idea2.upside! ? -1 : 1;\n    });\n\n    return ideaList;\n}\n\nfunction getLocalIdeasList(): InvestmentIdea[] {\n    const properIdeas = ideas;\n    var parsedIdeas: InvestmentIdea[] = [];\n\n    const ideasAuthor = ideas.author;\n\n    for (let i = 0; i < properIdeas.values.length; i++) {\n        const parsedIdea = new InvestmentIdea(\n            ideasAuthor,\n            properIdeas.values[i].ticker,\n            properIdeas.values[i].currency == \"USD\" ? Currency.USD : Currency.RUB,\n            properIdeas.values[i].targetPrice,\n            properIdeas.values[i].risk\n        );\n        parsedIdeas.push(parsedIdea);\n    }\n\n    return parsedIdeas;\n}\n","import React from \"react\";\nimport \"./InvestmentIdeasChart.css\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart, registerables } from \"chart.js\";\nChart.register(...registerables);\nimport { ScriptElementKindModifier } from \"typescript\";\nimport { fetchMOEXQuotes } from \"../../QuoteService/MoexQuoteService/MoexQuoteDataProvider\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { InvestmentIdea } from \"../Entity/InvestmentIdea\";\nimport { getInvestmentIdeasList } from \"../Entity/InvestmentIdeaDataProvider\";\n\nexport function InvestmentIdeasPage() {\n    return (\n        <div>\n            <Navigation />\n            <RevenueChart />\n        </div>\n    );\n}\n\nfunction Navigation() {\n    return (\n        <nav className=\"nav\">\n            <ul className=\"navigation-items\">\n                <li>Pricing1</li>\n                <li>About</li>\n                <li>Contact</li>\n            </ul>\n        </nav>\n    );\n}\n\nfunction RevenueChart() {\n    const [ideasList, updateUpsides] = useState<InvestmentIdea[]>([]);\n\n    useEffect(() => {\n        const fetchQuotes = async () => {\n            const quotes = await fetchMOEXQuotes();\n            const ideas = getInvestmentIdeasList(quotes);\n            updateUpsides(ideas);\n        };\n        fetchQuotes();\n    }, []);\n\n    const barLabels = ideasList.map((idea) => idea.ticker);\n    const chartValues = ideasList.map((idea) => idea.upside);\n\n    const data = {\n        labels: barLabels,\n        datasets: [\n            {\n                label: \"Апсайд (%)\",\n                data: chartValues,\n                backgroundColor: [\n                    \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(255, 99, 132, 0.2)\",\n                ],\n                borderWidth: 1,\n            },\n        ],\n    };\n    console.log(data);\n    return (\n        <div\n            style={{\n                height: \"50vh\",\n                position: \"relative\",\n                marginBottom: \"1%\",\n                padding: \"1%\",\n            }}\n        >\n            <Bar data={data} options={{ maintainAspectRatio: false }}></Bar>\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { InvestmentIdeasPage } from \"./InvestmentIdea/InvestmentIdeasChart/InvestmentIdeasChart\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <InvestmentIdeasPage />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nlet root = ReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}