{"version":3,"sources":["QuoteService/MoexQuoteService/Entity/MoexQuote.ts","QuoteService/MoexQuoteService/MoexQuoteDataProvider.ts","Core/Entity/Currency.ts","InvestmentIdea/Entity/InvestmentIdea.ts","InvestmentIdea/Entity/InvestmentIdeaDataProvider.ts","QuoteService/YahooQuoteService/Entity/YahooQuote.ts","QuoteService/YahooQuoteService/YahooQuoteDataProvider.ts","InvestmentIdea/InvestmentIdeasChart/InvestmentIdeasChart.tsx","App.tsx","index.tsx"],"names":["MoexQuote","ticker","quote","marketCap","Object","classCallCheck","this","fetchMOEXQuotes","_fetchMOEXQuotes","apply","arguments","_callee","response","quotes","uncastQuotes","_regeneratorRuntime","wrap","_context","prev","next","axios","get","sent","data","marketdata","length","abrupt","forEach","uncastQuote","push","stop","Currency","InvestmentIdea","author","currency","targetPrice","risk","priceOnOpening","openingDate","investmentThesis","companyName","upside","createClass","key","value","currentQuote","getInvestmentIdeasList","ideaList","getLocalIdeasList","_loop","i","find","calculateUpside","sort","sortInvestmentIdeas","idea1","idea2","properIdeas","ideas","parsedIdeas","ideasAuthor","values","parsedIdea","USD","RUB","YahooQuote","quoteDTO","symbol","regularMarketPrice","fetchYahooQuotesForIdeas","_fetchYahooQuotesForIdeas","tickerList","YahooQuoteDataProvider_regeneratorRuntime","filter","idea","map","fetchYahooQuotes","_callee2","tickers","yahooAPIStockURL","_context2","join","quoteResponse","result","console","log","InvestmentIdeasPage","react_default","a","createElement","Navigation","RevenueChart","className","_useState","useState","_useState2","slicedToArray","russianIdeasList","updateRussianUpsides","useEffect","_ref","asyncToGenerator","InvestmentIdeasChart_regeneratorRuntime","mark","russianIdeas","fetchMoexQuotes","_useState3","_useState4","foreignIdeasList","updateForeignUpsides","_ref2","yahooQuotes","nonRussianIdeas","fetchYahooQuotesHandler","labels","concat","toConsumableArray","datasets","label","backgroundColor","borderWidth","style","height","position","marginBottom","padding","dist","options","maintainAspectRatio","Chart","register","registerables","App","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.bb3d4adc.chunk.js","sourcesContent":["import { SimpleQuote } from \"../../SimpleQuote\";\n\nexport class MoexQuote implements SimpleQuote {\n    ticker: string;\n    quote: number;\n    marketCap?: number;\n\n    constructor(ticker: string, quote: number, marketCap?: number) {\n        this.ticker = ticker;\n        this.quote = quote;\n        this.marketCap = marketCap;\n    }\n}\n","import { MoexQuote } from \"./Entity/MoexQuote\";\nimport { MOEXResponse } from \"./Entity/MoexQuoteDTO\";\nimport axios from \"axios\";\n\nexport async function fetchMOEXQuotes(): Promise<MoexQuote[]> {\n    const response = await axios.get<MOEXResponse>(\n        \"https://iss.moex.com/iss/engines/stock/markets/shares/boards/tqbr/securities.json?iss.meta=on&iss.only=marketdata&marketdata.columns=SECID,LAST,ISSUECAPITALIZATION\"\n    );\n\n    let quotes: MoexQuote[] = [];\n    const uncastQuotes = response.data.marketdata.data;\n    if (uncastQuotes.length == 0) {\n        return [];\n    }\n\n    uncastQuotes.forEach((uncastQuote) => {\n        if (typeof uncastQuote[0] !== \"string\") {\n            return;\n        }\n        if (typeof uncastQuote[1] !== \"number\") {\n            return;\n        }\n\n        const quote = new MoexQuote(uncastQuote[0] as string, uncastQuote[1] as number, uncastQuote[2] as number);\n        quotes.push(quote);\n    });\n    return quotes;\n}\n","export enum Currency {\n    USD = \"USD\",\n    RUB = \"RUB\",\n    undefined = \"undefined\",\n}\n","import { Currency } from \"../../Core/Entity/Currency\";\nimport { SimpleQuote } from \"../../QuoteService/SimpleQuote\";\n\nexport class InvestmentIdea {\n    author: string;\n    ticker: string;\n    companyName?: string;\n    currency: Currency;\n    targetPrice: number;\n    priceOnOpening?: number;\n    openingDate?: Date;\n    risk?: string;\n    investmentThesis?: string;\n    upside?: number;\n\n    constructor(\n        author: string,\n        ticker: string,\n        currency: Currency,\n        targetPrice: number,\n        risk: string,\n        priceOnOpening?: number,\n        openingDate?: Date,\n        investmentThesis?: string,\n        companyName?: string,\n        upside?: number\n    ) {\n        this.author = author;\n        this.ticker = ticker;\n        this.currency = currency;\n        this.targetPrice = targetPrice;\n        this.priceOnOpening = priceOnOpening;\n        this.openingDate = openingDate;\n        this.risk = risk;\n        this.companyName = companyName;\n        this.investmentThesis = investmentThesis;\n    }\n\n    calculateUpside(currentQuote: SimpleQuote): number | undefined {\n        if (currentQuote.quote <= 0) {\n            return undefined;\n        }\n\n        const upside = (this.targetPrice - currentQuote.quote) / currentQuote.quote;\n\n        const upsideAsPercentage = upside * 100;\n        return upsideAsPercentage;\n    }\n}\n","import { InvestmentIdea } from \"./InvestmentIdea\";\nimport { Currency } from \"../../Core/Entity/Currency\";\n\nimport ideas from \"./investmentideas.json\";\nimport { SimpleQuote } from \"../../QuoteService/SimpleQuote\";\n\nexport function getInvestmentIdeasList(quotes: SimpleQuote[]): InvestmentIdea[] {\n    let ideaList = getLocalIdeasList();\n\n    for (let i = 0; i < ideaList.length; i++) {\n        const quote = quotes.find((quote) => quote.ticker === ideaList[i].ticker);\n        if (typeof quote === \"undefined\") {\n            continue;\n        }\n        ideaList[i].upside = ideaList[i].calculateUpside(quote);\n    }\n\n    ideaList.sort(sortInvestmentIdeas);\n\n    return ideaList;\n}\n\nexport function sortInvestmentIdeas(idea1: InvestmentIdea, idea2: InvestmentIdea): number {\n    if (idea1.upside == null && idea2.upside == null) return 0;\n    if (idea1.upside == null && idea2.upside != null) return 1;\n    if (idea1.upside != null && idea2.upside == null) return -1;\n\n    return idea1.upside! > idea2.upside! ? -1 : 1;\n}\n\nfunction getLocalIdeasList(): InvestmentIdea[] {\n    const properIdeas = ideas;\n    var parsedIdeas: InvestmentIdea[] = [];\n\n    const ideasAuthor = ideas.author;\n\n    for (let i = 0; i < properIdeas.values.length; i++) {\n        const parsedIdea = new InvestmentIdea(\n            ideasAuthor,\n            properIdeas.values[i].ticker,\n            properIdeas.values[i].currency == \"USD\" ? Currency.USD : Currency.RUB,\n            properIdeas.values[i].targetPrice,\n            properIdeas.values[i].risk\n        );\n        parsedIdeas.push(parsedIdea);\n    }\n\n    return parsedIdeas;\n}\n\nexport function tickersForYahooQuoteService(): string[] {\n    const allIdeas = getLocalIdeasList();\n    return allIdeas.filter((idea) => idea.currency === \"USD\").map((idea) => idea.ticker);\n}\n","import { SimpleQuote } from \"../../SimpleQuote\";\nimport { StockOverviewDTO } from \"./YahooQuotes\";\n\n/*\nSingular Yahoo quote provided by Yahoo's V10 API\nE.g.: https://query1.finance.yahoo.com/v10/finance/quoteSummary/AAPL?modules=price\n*/\ninterface YahooQuoteDTO {\n    quoteSummary: QuoteSummary;\n}\n\ninterface QuoteSummary {\n    result: Result[];\n}\n\ninterface Result {\n    price: Price;\n}\n\ninterface Price {\n    regularMarketPrice: PostMarketChange;\n}\n\ninterface PostMarketChange {\n    raw: number;\n    fmt: string;\n}\n\nexport class YahooQuote implements SimpleQuote {\n    ticker: string;\n    quote: number;\n\n    constructor(quoteDTO: StockOverviewDTO) {\n        this.ticker = quoteDTO.symbol;\n        this.quote = quoteDTO.regularMarketPrice;\n    }\n}\n","import axios from \"axios\";\nimport { tickersForYahooQuoteService } from \"../../InvestmentIdea/Entity/InvestmentIdeaDataProvider\";\nimport { YahooQuote } from \"./Entity/YahooQuote\";\nimport { YahooQuotesDTO, StockOverviewDTO } from \"./Entity/YahooQuotes\";\n\nexport async function fetchYahooQuotesForIdeas(): Promise<YahooQuote[]> {\n    const tickerList = tickersForYahooQuoteService();\n    const quotes = await fetchYahooQuotes(tickerList);\n    return quotes;\n}\n\nasync function fetchYahooQuotes(tickers: string[]): Promise<YahooQuote[]> {\n    const yahooAPIStockURL: string = \"https://query1.finance.yahoo.com/v7/finance/quote?symbols=\" + tickers.join(\",\");\n    const response = await axios.get<YahooQuotesDTO>(yahooAPIStockURL);\n\n    const uncastQuotes: StockOverviewDTO[] = response.data.quoteResponse.result;\n    if (uncastQuotes.length == 0) {\n        return [];\n    }\n\n    var quotes: YahooQuote[] = [];\n    uncastQuotes.forEach((uncastQuote) => {\n        if (typeof uncastQuote.symbol !== \"string\") {\n            return;\n        }\n        if (typeof uncastQuote.regularMarketPrice !== \"number\") {\n            return;\n        }\n\n        const quote = new YahooQuote(uncastQuote);\n        quotes.push(quote);\n    });\n    console.log(quotes);\n    return quotes;\n}\n","import React from \"react\";\nimport \"./InvestmentIdeasChart.css\";\nimport { Bar } from \"react-chartjs-2\";\nimport { Chart, registerables } from \"chart.js\";\nChart.register(...registerables);\nimport { ScriptElementKindModifier } from \"typescript\";\nimport { fetchMOEXQuotes } from \"../../QuoteService/MoexQuoteService/MoexQuoteDataProvider\";\nimport { fetchYahooQuotesForIdeas } from \"../../QuoteService/YahooQuoteService/YahooQuoteDataProvider\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { InvestmentIdea } from \"../Entity/InvestmentIdea\";\nimport { getInvestmentIdeasList, sortInvestmentIdeas } from \"../Entity/InvestmentIdeaDataProvider\";\n\nexport function InvestmentIdeasPage() {\n    return (\n        <div>\n            <Navigation />\n            <RevenueChart />\n        </div>\n    );\n}\n\nfunction Navigation() {\n    return (\n        <nav className=\"nav\">\n            <ul className=\"navigation-items\">\n                <li>Pricing1</li>\n                <li>About</li>\n                <li>Contact</li>\n            </ul>\n        </nav>\n    );\n}\n\nfunction RevenueChart() {\n    const [russianIdeasList, updateRussianUpsides] = useState<InvestmentIdea[]>([]);\n    useEffect(() => {\n        const fetchMoexQuotes = async () => {\n            const quotes = await fetchMOEXQuotes();\n            const russianIdeas = getInvestmentIdeasList(quotes).filter((idea) => idea.currency === \"RUB\");\n            updateRussianUpsides(russianIdeas);\n        };\n\n        fetchMoexQuotes();\n    }, []);\n\n    const [foreignIdeasList, updateForeignUpsides] = useState<InvestmentIdea[]>([]);\n    useEffect(() => {\n        const fetchYahooQuotesHandler = async () => {\n            const yahooQuotes = await fetchYahooQuotesForIdeas();\n            const nonRussianIdeas = getInvestmentIdeasList(yahooQuotes).filter((idea) => idea.currency === \"USD\");\n            updateForeignUpsides(nonRussianIdeas);\n        };\n        fetchYahooQuotesHandler();\n    }, []);\n\n    const barLabels = [...russianIdeasList, ...foreignIdeasList].sort(sortInvestmentIdeas).map((idea) => idea.ticker);\n    const chartValues = [...russianIdeasList, ...foreignIdeasList].sort(sortInvestmentIdeas).map((idea) => idea.upside);\n\n    const data = {\n        labels: barLabels,\n        datasets: [\n            {\n                label: \"Апсайд (%)\",\n                data: chartValues,\n                backgroundColor: [\n                    \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(173,255,47, 0.5)\",\n                    // \"rgba(255, 99, 132, 0.2)\",\n                ],\n                borderWidth: 1,\n            },\n        ],\n    };\n    console.log(data);\n    return (\n        <div\n            style={{\n                height: \"50vh\",\n                position: \"relative\",\n                marginBottom: \"1%\",\n                padding: \"1%\",\n            }}\n        >\n            <Bar data={data} options={{ maintainAspectRatio: false }}></Bar>\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { InvestmentIdeasPage } from \"./InvestmentIdea/InvestmentIdeasChart/InvestmentIdeasChart\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <InvestmentIdeasPage />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nlet root = ReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement);\n\nroot.render(\n    // <React.StrictMode>\n    <App />\n    // </React.StrictMode>\n);\n"],"sourceRoot":""}